import json
import logging

from asgiref.sync import sync_to_async
from channels.generic.websocket import AsyncWebsocketConsumer

# Custom ID for communication
SONG_REQUEST = "song_request"
URL_REQUEST = "url_request"
logger = logging.getLogger("comunication")


class ChatConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        logger.info("WebSocket connection established.")
        await self.accept()

    async def receive(self, text_data):
        # Parse the incoming message
        try:
            data = json.loads(text_data)
            message_type = data.get("message")

            if message_type == SONG_REQUEST:
                song_name = data.get("song_name")
                logger.debug(f"Received song request for: {song_name}")
                input_data = {"data": song_name}
                result, status = await sync_to_async(handle_song_search)(input_data)
                await self.send(text_data=json.dumps(result))

            elif message_type == URL_REQUEST:
                url = data.get("url")
                video_id = data.get("id")  # Optional ID field
                logger.debug(f"Received URL request for: {url}, ID: {video_id}")
                input_data = {"url": url, "id": video_id}
                result, status = await sync_to_async(handle_url_search)(input_data)
                await self.send(text_data=json.dumps(result))
            else:
                logger.warning(f"Unknown message type received: {message_type}")
                await self.send(
                    text_data=json.dumps({"error": "Unknown message type"})
                )

        except json.JSONDecodeError:
            logger.error("Failed to decode JSON data.")
            await self.send(
                text_data=json.dumps({"error": "Failed to decode JSON data"})
            )
        except Exception as e:
            logger.exception("An error occurred during message processing.")
            await self.send(text_data=json.dumps({"error": str(e)}))
